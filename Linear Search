//Linear Search to return index

public class Linear {
    public static void main(String[] args) {
        int[] nums = { 23,45,1,2,8,19,-3,-16,-11,28};
        int target = 19;
        int ans = linearSearch(nums, target);
        System.out.println(ans);
    }

    //Search in the array: return the index if the item found
    //Otherwise if item not found return -1

    static int linearSearch(int[] arr, int target) {
        if (arr.length == 0) {
            return -1;
        }

        //run a loop
        for(int index  = 0; index < arr.length ; index++) {
            //check for element at every index if it is = target
            int element = arr[index];
            if (element == target) {
                return index;
            }
        }

        //this line will execute if none of the return statements above have executed
        //hence the target not found
        return -1;
    }
}

//Linear Search to return element

public class Linear1 {
    public static void main(String[] args) {
        int[] nums = {12,2323,43,443,43,23,3,32};
        int target = 3;
        int ans = linearSearch(nums,target);
        System.out.println(ans);
    }

    static int linearSearch (int[] arr , int target) {
        if (arr.length == 0) {
            return -1;
        }
        for (int element : arr){        
            if(element == target){      
                 return element;        
            }                           
        }                                  
                                          
        return -1;
    }
}

//Linear search to print boolean value

public class Linear2 {
    public static void main(String[] args) {
        int[] nums = { 23,45,1,2,8,19,-3,-16,-11,28};
        int target = 0;
        boolean ans = linearSearch(nums, target);
        System.out.println(ans);
    }

    // search the target return true or false
    static boolean linearSearch(int[] arr, int target) {
        if (arr.length == 0) {
            return false;
        }

        //run a loop
        for(int index  = 0; index < arr.length ; index++) {

            int element = arr[index];
            if (element == target) {
                return true;
            }
        }
        return false;
    }
}

//Search In Range

public class SearchInRange {
    public static void main(String[] args) {
          int [] arr = {12,3,4,23,2,34,543,7};
          int target = 4;
        System.out.println(search(arr,target,1,4));
    }

    static int search(int[]arr, int target,int start, int end) {
        if (arr.length == 0) {
            return -1;
        }

        for(int index  = start; index <= end; index++) {
            int element = arr[index];
            if (element == target) {
                return index;
            }
        }
        return -1;
    }
}

//Search in Strings

public class SearchInStrings {
    public static void main(String[] args) {
        String name = "Nazi";
        char target = 'z';
        System.out.println(search(name, target));
    }
    static boolean search (String str, char target) {
        if (str.length() == 0) {
            return false;
        }

        for (int i = 0; i< str.length(); i++) {
            if (target == str.charAt(i)) {
                return true;
            }
        }
        return false;
    }
}


//Search in 2D Array

import java.util.Arrays;
public class SearchIn2DArray {
    public static void main(String[] args) {
        int [][] arr = {
                {23,4,1},
                {18,12,3,9},
                {78,99,34,56},
                {18,12}
        };
        int target = 900;
        int[] ans = search(arr,target);
        System.out.println(Arrays.toString(ans));
    }

    static int[] search (int[][] arr, int target) {
        for (int row = 0 ; row < arr.length ; row++) {
            for (int col = 0 ; col < arr[row].length ; col++) {
                if (arr[row][col] == target) {
                    return new int[]{row,col};
                }
            }
        }
        return new int[] {-1,-1};
    }
}


//Find Maximum in 2D Array

public class MaxIn2DArray {
    public static void main(String[] args) {
            int [][] arr = {
                    {23,4,1},
                    {18,12,3,9},
                    {78,99,34,56},
                    {18,12}
            };

            System.out.println(max(arr));
            System.out.println(Integer.MIN_VALUE );
            System.out.println(Integer.MAX_VALUE );
    }

    static int max (int[][] arr) {
        int maxi = arr[0][0];
            for (int row = 0 ; row < arr.length ; row++) {
                for (int col = 0 ; col < arr[row].length ; col++) {
                    if (arr[row][col] > maxi) {
                        maxi = arr[row][col];
                    }
                }
            }
            return maxi;
    }
}


// Finding Numbers that have even number of digits

public class EvenDigits {
    public static void main(String[] args) {
        int[] nums = {18, 345, 2, 6, 1764, 88, 99};
        System.out.println(findEvenNums(nums));
    }

    static int findEvenNums(int[] nums) {
        int count = 0;
        for (int num : nums) {
            if (even(num)) {
                count++;
            }
        }
        return count;
    }

    static boolean even(int num) {
        int numOfDigits = digits(num);
        if (numOfDigits % 2 == 0) {
            return true;
        }
        return false;
    }

    static int digits(int num) {
        if (num < 0) {
            num = num * -1;
        }
        if (num == 0) {
            return 1;
        }
        int count = 0;
        while (num > 0) {
            count++;
            num = num / 10;
        }
        return count;
    }
}


// Richest Customer Wealth

public class MaxWealth {
    public static void main(String[] args) {
        int[][] accounts = {{2,8,7},{7,1,3},{1,9,5}};
        System.out.println(maximumWealth(accounts));
    }
    static int maximumWealth(int[][] accounts) {
          int ans = Integer.MIN_VALUE ;
          for (int person = 0; person < accounts.length; person++) {
              int sum = 0;
              for ( int account = 0; account < accounts[person].length; account++) {
                  sum += accounts[person][account];
              }
              //Now , we have the sum of the accounts of the person
              //check with the overall ans

              if(sum > ans) {
                 ans = sum;
              }
          }
          return ans;
    }
}
